<?xml version="1.0" ?>
<script version="8.6.3.356">
    <description></description>
    <source><![CDATA[int warnings = 0

ICoreVisitor v = coreAccess.createVisitor()

def getSubTypes(TypeAccess type)
{
    List<TypeAccess> subTypes = new ArrayList<>()

    type.getReferencingElements(Aggregator.TYPE, false, DependencyKind.EXTENDS, DependencyKind.IMPLEMENTS).each()
    {
        TypeAccess subType ->

        subTypes.add(subType)
        subTypes.addAll(getSubTypes(subType))
    }
    return subTypes
}

v.onType()
{
    TypeAccess type ->

    if(type.isExternal() || type.isExcluded())
    {
        return
    }

    def subTypes = getSubTypes(type)

    if (subTypes.isEmpty())
    {
        return
    }

    SourceFileAccess sourceFile = type.getSourceFile();

    def outDeps = type.getOutgoingDependenciesRecursively(Aggregator.TYPE, true)

    for (AggregatedDependencyAccess dep : outDeps)
    {
        TypeAccess toType = (TypeAccess) dep.getTo()

        if (toType.isExternal() || toType.getSourceFile().equals(sourceFile))
        {
            continue;
        }
        if (subTypes.contains(toType))
        {
			 result.addWarningIssue(dep, "Supertype uses subtype", "Reference to subtype ${toType.getShortName()}")
			 warnings++
        }
    }

 }

coreAccess.visitModel(v);
println "Found ${warnings} warnings"

]]></source>
    <parameterDefinitions>
        <parameterDefinition name="timeout" type="Integer" description="When scripts are scheduled for automated execution they time out after the specified number of seconds. The timeout must be greater than '0'." defaultValue="10" candidates=""></parameterDefinition>
        <parameterDefinition name="output" type="String" description="When a path is specified the output of the script is written into this file. The use of an absolute path (i.e. starting with '/' or 'C:/') is not recommended. It might not be cross-platform compatible." defaultValue="" candidates=""></parameterDefinition>
    </parameterDefinitions>
    <languages></languages>
</script>